// https://github.com/mitranim/style-base

/* position */

.relative {position: relative;}
.absolute {position: absolute;}
.static   {position: static;}
.fixed    {position: fixed;}

.sticky {
    position: -webkit-sticky;
    position: sticky;
}

/* display */

.block        {display: block;}
.inline       {display: inline;}
.inline-block {display: inline-block;}
.inline-table {display: inline-table;}
.table        {display: table;}
.table-row    {display: table-row;}
.table-column {display: table-column;}
.table-cell   {display: table-cell;}
.list-item    {display: list-item;}

/* width and height */

.width-25p    {width:  25%;}
.width-50p    {width:  50%;}
.width-75p    {width:  75%;}
.width-100p   {width:  100%;}
.width-100vw  {width:  100vw;}
.height-100p  {height: 100%;}
.height-100vh {height: 100vh;}

/* flex */

%display-flex {
    display: -webkit-box;
    display: -ms-flexbox;
    display: flex;
}

%display-inline-flex {
    display: -webkit-inline-box;
    display: -ms-inline-flexbox;
    display: inline-flex;
}

%flex-direction-row {
    -webkit-box-orient:    horizontal;
    -webkit-box-direction: normal;
    -ms-flex-direction:    row;
    flex-direction:        row;
}

%flex-direction-col {
    -webkit-box-orient:    vertical;
    -webkit-box-direction: normal;
    -ms-flex-direction:    column;
    flex-direction:        column;
}

@mixin flex-direction($value) {
    @if      $value == row {@extend %flex-direction-row;}
    @else if $value == col {@extend %flex-direction-col;}
    @else {@error 'Unknown flex-direction: #{$value}';}
}

%flex-justify-start {
    -webkit-box-pack: start;
    -ms-flex-pack:    start;
    justify-content:  flex-start;
}

%flex-justify-center {
    -webkit-box-pack: center;
    -ms-flex-pack:    center;
    justify-content:  center;
}

%flex-justify-end {
    -webkit-box-pack: end;
    -ms-flex-pack:    end;
    justify-content:  flex-end;
}

%flex-justify-around {
    -ms-flex-pack:   distribute;
    justify-content: space-around;
}

%flex-justify-between {
    -webkit-box-pack: justify;
    -ms-flex-pack:    justify;
    justify-content:  space-between;
}

@mixin flex-justify($value) {
    @if      $value == start   {@extend %flex-justify-start;}
    @else if $value == center  {@extend %flex-justify-center;}
    @else if $value == end     {@extend %flex-justify-end;}
    @else if $value == around  {@extend %flex-justify-around;}
    @else if $value == between {@extend %flex-justify-between;}
    @else {@error 'Unknown flex-justify (justify-content) property: #{$value}';}
}

%flex-align-start {
    -webkit-box-align: start;
    -ms-flex-align:    start;
    align-items:       flex-start;
}

%flex-align-center {
    -webkit-box-align: center;
    -ms-flex-align:    center;
    align-items:       center;
}

%flex-align-end {
    -webkit-box-align: end;
    -ms-flex-align:    end;
    align-items:       flex-end;
}

%flex-align-stretch {
    -webkit-box-align: stretch;
    -ms-flex-align:    stretch;
    align-items:       stretch;
}

@mixin flex-align($value) {
    @if      $value == start   {@extend %flex-align-start;}
    @else if $value == center  {@extend %flex-align-center;}
    @else if $value == end     {@extend %flex-align-end;}
    @else if $value == stretch {@extend %flex-align-stretch;}
    @else {@error 'Unknown flex-align (align-items) property: #{$value}';}
}

@mixin flex-layout($dir: none, $justify: none, $align: none) {
    @extend %display-flex;
    @if $dir     != none {@include flex-direction($dir);}
    @if $justify != none {@include flex-justify($justify);}
    @if $align   != none {@include flex-align($align);}
}

@mixin flex-inline {
    @extend %display-inline-flex;
}

@mixin flex-wrap($value: wrap) {
    -ms-flex-wrap: $value;
    flex-wrap:     $value;
}

@mixin flex-nowrap {
    @include flex-wrap(nowrap);
}

@mixin flex($value) {
    -webkit-box-flex: $value;
    -ms-flex:         $value;
    flex:             $value;
}

%flex-self-start {
    -ms-flex-item-align: start;
    align-self:          flex-start;
}

%flex-self-center {
    -ms-flex-item-align: center;
    -ms-grid-row-align:  center;
    align-self:          center;
}

%flex-self-end {
    -ms-flex-item-align: end;
    align-self:          flex-end;
}

%flex-self-stretch {
    -ms-flex-item-align: stretch;
    -ms-grid-row-align:  stretch;
    align-self:          stretch;
}

@mixin flex-self($value) {
    @if      $value == start   {@extend %flex-self-start;}
    @else if $value == center  {@extend %flex-self-center;}
    @else if $value == end     {@extend %flex-self-end;}
    @else if $value == stretch {@extend %flex-self-stretch;}
    @else {@error 'Unknown flex-self (align-self) property: #{$value}';}
}

@mixin flex-shrink($value) {
    @if $value == none {
        @include flex-shrink(0);
    }
    @else {
        -ms-flex-negative: $value;
        flex-shrink:       $value;
    }
}

@mixin flex-order($value) {
    -webkit-box-ordinal-group: $value + 1;
    -ms-flex-order:            $value;
    order:                     $value;
}

/* whitespace */

@mixin margin-v($value) {
    margin-top:    $value;
    margin-bottom: $value;
}

@mixin margin-h($value) {
    margin-left:  $value;
    margin-right: $value;
}

@mixin padding-v($value) {
    padding-top:    $value;
    padding-bottom: $value;
}

@mixin padding-h($value) {
    padding-left:  $value;
    padding-right: $value;
}

@mixin gaps-v($value) {
    > :not(:last-child) {margin-bottom: $value;}
}

@mixin gaps-h($value) {
    > :not(:last-child) {margin-right: $value;}
}

/* overflow */

.overflow-hidden {
    overflow: hidden;
}

.overflow-x-scroll {
    overflow-x: scroll;
    overflow-y: hidden;
}

.overflow-y-scroll {
    overflow-x: hidden;
    overflow-y: scroll;
}

/* cursor */

.cursor-auto        {cursor: auto;}
.cursor-move        {cursor: move;}
.cursor-text        {cursor: text;}
.cursor-wait        {cursor: wait;}
.cursor-help        {cursor: help;}
.cursor-default     {cursor: default;}
.cursor-pointer     {cursor: pointer;}
.cursor-zoom-in     {cursor: zoom-in;}
.cursor-progress    {cursor: progress;}
.cursor-crosshair   {cursor: crosshair;}
.cursor-not-allowed {cursor: not-allowed;}
.no-pointer-styles  {pointer-events: none;}
.no-pointer-events  {pointer-events: none;}

/* visibility */

.visibility-hidden   {visibility: hidden;}
.visibility-visible  {visibility: visible;}
.visibility-collapse {visibility: collapse;}

/* tables */

.table-fixed {table-layout: fixed;}

/* text-align */

.text-left    {text-align: left;}
.text-right   {text-align: right;}
.text-center  {text-align: center;}
.text-justify {text-align: justify;}

/* vertical-align */

.valign-top         {vertical-align: top;}
.valign-middle      {vertical-align: middle;}
.valign-bottom      {vertical-align: bottom;}
.valign-baseline    {vertical-align: baseline;}
.valign-sub         {vertical-align: sub;}
.valign-super       {vertical-align: super;}
.valign-text-top    {vertical-align: text-top;}
.valign-text-bottom {vertical-align: text-bottom;}

/* text-decoration */

.text-decoration-none {text-decoration: none;}
.text-overline        {text-decoration: overline;}
.text-underline       {text-decoration: underline;}
.text-line-through    {text-decoration: line-through;}

/* text-transform */

.text-transform-none {text-transform: none;}
.text-uppercase      {text-transform: uppercase;}
.text-lowercase      {text-transform: lowercase;}
.text-capitalize     {text-transform: capitalize;}

/* white-space */

.wspace-pre      {white-space: pre;}
.wspace-normal   {white-space: normal;}
.wspace-nowrap   {white-space: nowrap;}
.wspace-pre-wrap {white-space: pre-wrap;}
.wspace-pre-line {white-space: pre-line;}

/* text-overflow */

.text-ellipsis {
    text-overflow: ellipsis;
    @extend .wspace-nowrap;
    @extend .overflow-hidden;
    * {@extend .text-ellipsis;}

    // Tentative workaround for a subtle input graphics bug in Blink. The issue
    // occurs at the start of a line inside a text-ellipsis hierarchy.
    input[type=radio]:first-child {margin-left: 1px;}
}

/* font-weight */

.weight-normal   {font-weight: normal;}
.weight-bold     {font-weight: bold;}
.weight-semibold {font-weight: 500;}
.weight-bolder   {font-weight: bolder;}
.weight-lighter  {font-weight: lighter;}
.weight-100      {font-weight: 100;}
.weight-200      {font-weight: 200;}
.weight-300      {font-weight: 300;}
.weight-400      {font-weight: 400;}
.weight-500      {font-weight: 500;}
.weight-600      {font-weight: 600;}
.weight-700      {font-weight: 700;}
.weight-800      {font-weight: 800;}
.weight-900      {font-weight: 900;}

/* font-style */

.font-normal  {font-style: normal;}
.font-italic  {font-style: italic;}
.font-oblique {font-style: oblique;}

/* Misc */

.circle {border-radius: 50%;}

.bg-center {
    background-position: center center;
    background-repeat: no-repeat;
}

.bg-cover {
    @extend .bg-center;
    background-size: cover;
}

.bg-contain {
    @extend .bg-center;
    background-size: contain;
}
